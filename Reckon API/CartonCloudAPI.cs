using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System.Collections.Generic;
using SPL_API.Zoho;


namespace SPL_API
{
    public static class Carton_Cloud_API
    {
        /// <summary>
        /// This request triggers the creation of a stock on hand report in Carton Cloud. This report isn't instantly available. It usually
        /// takes a few seconds to generate but can take up to a minute or two. The request returns a UUID which can be used to fetch the report later.
        /// </summary>
        /// <param name="warehouseZID">ZID of the warehouse</param>
        /// <returns>A uuid to fetch the stock on hand report when it is ready.</returns>
        [FunctionName("CartonCloudCreateStockOnHandReport")]
        public static async Task<IActionResult> CartonCloudCreateStockOnHandReport(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = "carton-cloud/stock-on-hand-report/{warehouseZID}")] HttpRequest req,
        string warehouseZID,
        ILogger log)
        {
            Console.WriteLine("CartonCloudCreateStockOnHandReport request received");

            if (string.IsNullOrEmpty(warehouseZID))
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INTERNAL_SERVER_ERROR, errorMessage = "Missing warehouseZID in route path" });
            }

            // TODO: send this information directly in the API request - not urgent as this is working fine in production.
            var cartonCloudConfiguration = await ZohoAPIController.GETCartonCloudConfiguration(warehouseZID);
            if (cartonCloudConfiguration == null)
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.MISSING_API_CONFIG, errorMessage = "Unable to load carton cloud configuration" });
            }

            if (string.IsNullOrEmpty(cartonCloudConfiguration.client_id) || string.IsNullOrEmpty(cartonCloudConfiguration.client_secret))
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INVALID_API_CONFIG, errorMessage = "Invalid carton cloud configuration" });
            }

            CartonCloud.APIController cartonAPIController = new(cartonCloudConfiguration);
            var reportUUID = await cartonAPIController.POSTSOHReport();

            if (string.IsNullOrEmpty(reportUUID))
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { code = 500, errorType = APIErrorType.INTERNAL_SERVER_ERROR, errorMessage = "Unable to create SOH report" });
            }

            CartonCloudCreateStockOnHandReportResponse ResponseData = new CartonCloudCreateStockOnHandReportResponse() { uuid = reportUUID };
            return new OkObjectResult(new SuccessAPIResponse<CartonCloudCreateStockOnHandReportResponse>() { code = 201, data = ResponseData });
        }


        /// <summary>
        /// This request fetches the stock on hand report by using the uuid generated by CartonCloudCreateStockOnHandReport.
        /// </summary>
        /// <param name="warehouseZID">ZID of the warehouse</param>
        /// <param name="uuid">UUID of the report</param>
        [FunctionName("CartonCloudGETStockOnHandReport")]
        public static async Task<IActionResult> CartonCloudGETStockOnHandReport(
        [HttpTrigger(AuthorizationLevel.Function, "get", Route = "carton-cloud/stock-on-hand-report/{warehouseZID}/{uuid}")] HttpRequest req,
        string warehouseZID,
        string uuid,
        ILogger log)
        {
            Console.WriteLine("CartonCloudGETStockOnHandReport request received");

            if (string.IsNullOrEmpty(warehouseZID))
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INTERNAL_SERVER_ERROR, errorMessage = "Missing warehouseZID in route path" });
            }

            if (string.IsNullOrEmpty(uuid))
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INTERNAL_SERVER_ERROR, errorMessage = "Missing uuid in route path" });
            }

            // Note: We could instead use a post request and attach this information in the post body.
            var cartonCloudConfiguration = await ZohoAPIController.GETCartonCloudConfiguration(warehouseZID);
            if (cartonCloudConfiguration == null)
            {
                //return "No reckon configuration found";
                // Handle the error case by returning to the redirecturl with an error message
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.MISSING_API_CONFIG, errorMessage = "Unable to load carton cloud configuration" });
            }

            if (string.IsNullOrEmpty(cartonCloudConfiguration.client_id) || string.IsNullOrEmpty(cartonCloudConfiguration.client_secret))
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INVALID_API_CONFIG, errorMessage = "Invalid carton cloud configuration" });
            }

            CartonCloud.APIController cartonAPIController = new(cartonCloudConfiguration);
            var sohReport = await cartonAPIController.GETSOHReport(uuid);

            if (sohReport == null)
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INVALID_PARAMETERS, errorMessage = "Invalid or expired stock on hand report uuid" });
            }

            return new OkObjectResult(new SuccessAPIResponse<CartonCloud.GETSOHReportResponse>() { data = sohReport });
        }


        /// <summary>
        /// POSTs a new sales order to Carton Cloud. 
        /// </summary>
        /// <param name="warehouseZID">ZID of the warehouse</param>
        [FunctionName("CartonCloudNewSalesOrder")]
        public static async Task<IActionResult> CartonCloudPOSTNewSalesOrder(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = "carton-cloud/sales-order/{warehouseZID?}")] HttpRequest req,
        string warehouseZID,
        ILogger log)
        {
            Console.WriteLine("CartonCloudPOSTNewSalesOrder request received");

            if (string.IsNullOrEmpty(warehouseZID))
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INTERNAL_SERVER_ERROR, errorMessage = "Missing warehouseZID in route path" });
            }

            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();

            if (requestBody == null)
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INVALID_REQUEST_BODY, errorMessage = "Missing json body" });
            }

            CartonCloudAPICreateSalesOrderRequest payload = JsonConvert.DeserializeObject<CartonCloudAPICreateSalesOrderRequest>(requestBody);

            if (payload == null)
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INVALID_REQUEST_BODY, errorMessage = "Missing json body" });
            }

            // Validate payload
            if (string.IsNullOrEmpty(payload.OrderReference) || string.IsNullOrEmpty(payload.DateOrdered) || string.IsNullOrEmpty(payload.DatePickup) ||
                payload.CustomerDetails == null || payload.OrderLines == null || payload.OrderLines.Length <= 0)
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INVALID_REQUEST_BODY, errorMessage = "Invalid json body" });
            }

            var cartonCloudConfiguration = await ZohoAPIController.GETCartonCloudConfiguration(warehouseZID);
            if (cartonCloudConfiguration == null)
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.MISSING_API_CONFIG, errorMessage = "Unable to load carton cloud configuration" });
            }

            if (string.IsNullOrEmpty(cartonCloudConfiguration.client_id) || string.IsNullOrEmpty(cartonCloudConfiguration.client_secret))
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INVALID_API_CONFIG, errorMessage = "Invalid carton cloud configuration" });
            }

            CartonCloud.APIController cartonAPIController = new(cartonCloudConfiguration);

            // Build order line items...
            List<CartonCloud.OutboundOrderItem> items = new();
            foreach (var orderLine in payload.OrderLines)
            {
                items.Add(new()
                {
                    measures =
                    {
                        quantity = orderLine.Quantity
                    },
                    details =
                    {
                        product =
                        {
                            id = orderLine.ProductUUID,
                            customer = null
                        },
                        unitOfMeasure = null
                    }
                });
            }

            // Build the order header
            CartonCloud.POSTOutboundOrder newSalesOrder = new CartonCloud.POSTOutboundOrder()
            {
                references =
                {
                    customer = payload.OrderReference
                },
                customer =
                {
                    id = cartonAPIController.CustomerUUID,
                    references = null
                },
                type = "OUTBOUND",
                warehouse =
                {
                    id = cartonAPIController.WarehouseUUID
                },
                details =
                {
                    instructions = payload.PackingInstructions,
                    invoiceValue = null,
                    urgent = false,
                    collect =
                    {
                        requiredDate = payload.DatePickup,
                    },
                    deliver =
                    {
                        address =
                        {
                            companyName = String.IsNullOrEmpty(payload.CustomerDetails.CompanyName) ? null : payload.CustomerDetails.CompanyName,
                            address1 = String.IsNullOrEmpty(payload.CustomerDetails.Address.Address1) ? null : payload.CustomerDetails.Address.Address1,
                            address2 = String.IsNullOrEmpty(payload.CustomerDetails.Address.Address2) ? null : payload.CustomerDetails.Address.Address2,
                            city = String.IsNullOrEmpty(payload.CustomerDetails.Address.City) ? null : payload.CustomerDetails.Address.City,
                            state =
                            {
                                code = String.IsNullOrEmpty(payload.CustomerDetails.Address.State) ? null : payload.CustomerDetails.Address.State
                            },
                            country =
                            {
                                iso2Code = String.IsNullOrEmpty(payload.CustomerDetails.Address.Country) ? null : payload.CustomerDetails.Address.Country
                            },
                            suburb = String.IsNullOrEmpty(payload.CustomerDetails.Address.Suburb) ? null : payload.CustomerDetails.Address.Suburb,
                            postcode = String.IsNullOrEmpty(payload.CustomerDetails.Address.PostCode) ? null : payload.CustomerDetails.Address.PostCode,
                            email = String.IsNullOrEmpty(payload.CustomerDetails.Email) ? null : payload.CustomerDetails.Email,
                            phone = String.IsNullOrEmpty(payload.CustomerDetails.Phone) ? null : payload.CustomerDetails.Phone
                        },
                        cashPaymentAmount = null,
                        instructions = payload.DeliveryInstructions,
                        method =
                        {
                            type = "SHIPPING",
                            requestedService = "Standard"
                        },

                    },
                },
                items = items
            };

            if (payload.DateDeliver != null)
            {
                newSalesOrder.details.deliver.requiredDate = payload.DateDeliver;
            }
            else
            {
                // If he delivery date is not provided, then the customer will pick up the order from the warehouse directly.
                newSalesOrder.properties.transportCompany = "Other";
            }

            // The WA warehouse doesn't support custom properties, so we need can just set it to null. 
            if (cartonCloudConfiguration.Warehouse.Warehouse_Name == "WA")
            {
                newSalesOrder.properties = null;
            }

            // Create a new sales order in Carton Cloud.
            var salesOrderResponse = await cartonAPIController.POSTSalesOrder(newSalesOrder);
            if (salesOrderResponse == null)
            {
                var p = JsonConvert.SerializeObject(newSalesOrder, Formatting.None, new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore
                });

                var res = await ZohoAPIController.POSTWebhookLog("POST_SALES_ORDER_ERROR", requestBody + "\n\n" + p);

                return new BadRequestObjectResult(new ErrorAPIResponse() { code = 500, errorType = APIErrorType.INTERNAL_SERVER_ERROR, errorMessage = "Unable to post new sales order" });
            }

            return new OkObjectResult(new SuccessAPIResponse<CartonCloud.GETOutboundOrder>() { code = 201, data = salesOrderResponse });
        }


        /// <summary>
        /// POSTs a new sales order to Carton Cloud. 
        /// </summary>
        /// <param name="req"></param>
        /// <param name="warehouseZID"></param>
        /// <returns></returns>
        [FunctionName("CartonCloudNewPurchaseOrder")]
        public static async Task<IActionResult> CartonCloudPOSTNewPurchaseOrder(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = "carton-cloud/purchase-order/{warehouseZID?}")] HttpRequest req,
        string warehouseZID,
        ILogger log)
        {
            Console.WriteLine("CartonCloudPOSTNewPurchaseOrder request received");

            if (string.IsNullOrEmpty(warehouseZID))
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INTERNAL_SERVER_ERROR, errorMessage = "Missing warehouseZID in route path" });
            }

            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();

            if (requestBody == null)
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INVALID_REQUEST_BODY, errorMessage = "Missing json body" });
            }

            CartonCloudAPICreatePurchaseOrderRequest payload = JsonConvert.DeserializeObject<CartonCloudAPICreatePurchaseOrderRequest>(requestBody);

            if (payload == null)
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INVALID_REQUEST_BODY, errorMessage = "Missing json body" });
            }

            // Validate payload
            if (string.IsNullOrEmpty(payload.ContainerNumber) || string.IsNullOrEmpty(payload.DateOrdered) || string.IsNullOrEmpty(payload.ArrivalDate) ||
                payload.OrderLines == null || payload.OrderLines.Length <= 0)
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INVALID_REQUEST_BODY, errorMessage = "Invalid json body" });
            }

            var cartonCloudConfiguration = await ZohoAPIController.GETCartonCloudConfiguration(warehouseZID);
            if (cartonCloudConfiguration == null)
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.MISSING_API_CONFIG, errorMessage = "Unable to load carton cloud configuration" });
            }

            if (string.IsNullOrEmpty(cartonCloudConfiguration.client_id) || string.IsNullOrEmpty(cartonCloudConfiguration.client_secret))
            {
                return new BadRequestObjectResult(new ErrorAPIResponse() { errorType = APIErrorType.INVALID_API_CONFIG, errorMessage = "Invalid carton cloud configuration" });
            }

            CartonCloud.APIController cartonAPIController = new(cartonCloudConfiguration);

            // Build purchase order lines
            List<CartonCloud.InboundOrderItem> items = new();
            foreach (var orderLine in payload.OrderLines)
            {
                items.Add(new()
                {
                    properties =
                    {
                        expiryDate = orderLine.ExpiryDate,
                        batch = orderLine.BatchNumber,
                    },
                    measures =
                    {
                        quantity = orderLine.Quantity
                    },
                    details =
                    {
                        product =
                        {
                            id = orderLine.ProductUUID,
                            customer = null
                        },
                        unitOfMeasure = null
                    }
                });
            }

            // Build the purchase order header
            CartonCloud.POSTInboundOrder newPurchaseOrder = new CartonCloud.POSTInboundOrder()
            {
                references =
                {
                    customer = payload.OrderReference
                },
                customer =
                {
                    id = cartonAPIController.CustomerUUID,
                    references = null
                },
                warehouse =
                {
                    id = cartonAPIController.WarehouseUUID
                },
                properties =
                {
                    container = payload.ContainerNumber,
                    containerSize = payload.ContainerSize,
                },
                details =
                {
                    instructions = null,
                    urgent = false,
                    arrivalDate = payload.ArrivalDate,
                },
                items = items
            };

            // POST the new purchase order to Carton Cloud.
            var purchaseOrderResponse = await cartonAPIController.POSTPurchaseOrder(newPurchaseOrder);
            if (purchaseOrderResponse == null)
            {
                var p = JsonConvert.SerializeObject(newPurchaseOrder, Formatting.None, new JsonSerializerSettings
                {
                    NullValueHandling = NullValueHandling.Ignore
                });

                var res = await ZohoAPIController.POSTWebhookLog(CartonCloudWebhookLogTypes.POST_PURCHASE_ORDER_ERROR, requestBody + "\n\n" + p);

                return new BadRequestObjectResult(new ErrorAPIResponse() { code = 500, errorType = APIErrorType.INTERNAL_SERVER_ERROR, errorMessage = "Unable to post new purchase order" });
            }

            return new OkObjectResult(new SuccessAPIResponse<CartonCloud.GETInboundOrder>() { code = 201, data = purchaseOrderResponse });
        }


        /// <summary>
        /// Webhook for processing inbound events triggered by the warehouse.
        /// </summary>
        [FunctionName("CartonCloudInboundWebhook")]
        public static async Task<IActionResult> CartonCloudInboundWebhook(
[HttpTrigger(AuthorizationLevel.Function, "post", Route = "carton-cloud/webhook/inbound")] HttpRequest req,
ILogger log)
        {
            Console.WriteLine("CartonCloudInboundWebhook request received");

            string headersStr = "";
            foreach (var key in req.Headers.Keys)
            {
                headersStr += key + ": " + req.Headers[key] + "; ";
            }
            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();

            // Log the request to the database before processing it.
            var res = await ZohoAPIController.POSTWebhookLog(CartonCloudWebhookLogTypes.INBOUND, "HEADERS: " + headersStr + "\nBODY: " + requestBody);

            try
            {
                // The Authorisation header is used to validate the request and determine which warehouse sent the request.
                if (!req.Headers.ContainsKey("Authorisation"))
                {
                    return new UnauthorizedResult();
                }

                string authHeader = req.Headers["Authorisation"];
                if (string.IsNullOrEmpty(authHeader))
                {
                    return new UnauthorizedResult();
                }

                var splitHeader = AppUtilities.Base64Decode(authHeader.Replace("Bearer ", "")).Split(":");
                if (splitHeader.Length != 2)
                {
                    return new UnauthorizedResult();
                }

                string clientID = splitHeader[0];
                string clientSecret = splitHeader[1];

                // Validate the clientID and clientSecret
                var cartonCloudConfiguration = await ZohoAPIController.GETCartonCloudConfiguration(clientID, clientSecret);
                if (cartonCloudConfiguration == null)
                {
                    return new UnauthorizedResult();
                }

                // Parse the request body to get the payload header and send to the zoho server. This will trigger a function to create the receipt.
                var payload = JsonConvert.DeserializeObject<CartonCloudAPIWebhookPayload>(requestBody);
                ZohoCartonCloudWebhookRecord record = new()
                {
                    Type_field = payload.type,
                    STATUS = payload.status,
                    NumericId = payload.references.numericId,
                    Customer_Reference = payload.references.customer,
                    Date_field = DateTime.UtcNow.ToString("dd-MMM-yyyyThh:mm:ss"),
                    Warehouse = cartonCloudConfiguration.Warehouse.Warehouse_Name,
                    DeliveryInstructions = payload.details.instructions,
                };

                string recordID = await ZohoAPIController.POSTWebhook(record);
                if (String.IsNullOrEmpty(recordID))
                {
                    throw new Exception("Wasn't able to POST webhook");
                }

                // Parse the record lines from the payload and post them to the zoho server. This will trigger a function to create the receipt lines.
                List<ZohoCartonCloudWebhookRecordLine> lines = new();
                foreach (var item in payload.Items)
                {

                    string expiryDateString = "";
                    if (item?.properties?.expiryDate != null)
                    {
                        expiryDateString = DateTime.ParseExact(item.properties.expiryDate, "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd-MMM-yyyy");
                    }
                    var existingLine = lines.Find(x => x.Expiry_Date_String == expiryDateString && x.ProductCode == item.details.product.references.code);
                    if (existingLine == null)
                    {
                        ZohoCartonCloudWebhookRecordLine recordLine = new()
                        {
                            ProductCode = item.details.product.references.code,
                            Quantity = item.measures.quantity,
                            Expiry_Date_String = expiryDateString,
                            Record = recordID
                        };
                        lines.Add(recordLine);
                    }
                    else
                    {
                        existingLine.Quantity += item.measures.quantity;
                    }
                }

                var result = await ZohoAPIController.POSTWebhookLines(lines);
                if (result == false)
                {
                    throw new Exception("Unable to add webhook lines");
                }

                return new OkResult();

            }
            catch (Exception ex)
            {
                // Log the error. This will also trigger notification emails to Jeremy to investigate. 
                await ZohoAPIController.POSTWebhookLog(CartonCloudWebhookLogTypes.API_ERROR, "HEADERS: " + headersStr + "\nBODY: " + requestBody + "\nError: " + ex.Message);
                // Return an OK result to avoid the webhook from retrying on the carton cloud servers. 
                return new OkResult();
            }
        }

        /// <summary>
        /// Webhook for processing outbound events triggered by the warehouse.
        /// </summary>
        [FunctionName("CartonCloudOutboundWebhook")]
        public static async Task<IActionResult> CartonCloudOutboundWebhook(
[HttpTrigger(AuthorizationLevel.Function, "post", Route = "carton-cloud/webhook/outbound")] HttpRequest req,
ILogger log)
        {
            Console.WriteLine("CartonCloudOutboundWebhook request received");
            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
            string headersStr = "";
            foreach (var key in req.Headers.Keys)
            {
                headersStr += key + ": " + req.Headers[key] + "; ";
            }

            // Log the request to the database before processing it.
            var res = await ZohoAPIController.POSTWebhookLog(CartonCloudWebhookLogTypes.OUTBOUND, "HEADERS: " + headersStr + "\nBODY: " + requestBody);

            try
            {
                // The Authorisation header is used to validate the request and determine which warehouse sent the request.
                if (!req.Headers.ContainsKey("Authorisation"))
                {
                    await ZohoAPIController.POSTWebhookLog(CartonCloudWebhookLogTypes.API_ERROR, "Missing Authorisation Header");
                    return new UnauthorizedResult();
                }

                string authHeader = req.Headers["Authorisation"];
                if (string.IsNullOrEmpty(authHeader))
                {
                    await ZohoAPIController.POSTWebhookLog(CartonCloudWebhookLogTypes.API_ERROR, "Authorisation Header is NULL");
                    return new UnauthorizedResult();
                }

                var splitHeader = AppUtilities.Base64Decode(authHeader.Replace("Bearer ", "")).Split(":");
                if (splitHeader.Length != 2)
                {
                    await ZohoAPIController.POSTWebhookLog(CartonCloudWebhookLogTypes.API_ERROR, "Unable to split Authorisation header: " + authHeader);
                    return new UnauthorizedResult();
                }

                string clientID = splitHeader[0];
                string clientSecret = splitHeader[1];

                // Validate the clientID and clientSecret
                // we could send this information directly in the API request
                var cartonCloudConfiguration = await ZohoAPIController.GETCartonCloudConfiguration(clientID, clientSecret);
                if (cartonCloudConfiguration == null)
                {
                    await ZohoAPIController.POSTWebhookLog(CartonCloudWebhookLogTypes.API_ERROR, "Unable to obtain carton cloud config. ClientID: " + clientID + "; Client Secret: " + clientSecret);
                    return new UnauthorizedResult();
                }

                // Parse the request body to get the payload header and send to the zoho server. This will trigger a function to create the pick slip.
                var payload = JsonConvert.DeserializeObject<CartonCloudAPIWebhookPayload>(requestBody);
                ZohoCartonCloudWebhookRecord record = new()
                {
                    Type_field = payload.type,
                    STATUS = payload.status,
                    NumericId = payload.references.numericId,
                    Customer_Reference = payload.references.customer,
                    Date_field = DateTime.UtcNow.ToString("dd-MMM-yyyyThh:mm:ss"),
                    Warehouse = cartonCloudConfiguration.Warehouse.Warehouse_Name,
                };

                if (await ZohoAPIController.GETCartonCloudWebhookRecord(record.NumericId, record.STATUS) != null)
                {
                    return new OkResult();
                }
                ;

                string recordID = await ZohoAPIController.POSTWebhook(record);
                if (String.IsNullOrEmpty(recordID))
                {
                    throw new Exception("Wasn't able to POST webhook");
                }

                // Parse the record lines from the payload and post them to the zoho server. This will trigger a function to create the pick slip lines.
                List<ZohoCartonCloudWebhookRecordLine> lines = new();
                foreach (var item in payload.Items)
                {
                    string expiryDateString = "";
                    if (item?.properties?.expiryDate != null)
                    {
                        expiryDateString = DateTime.ParseExact(item.properties.expiryDate, "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture).ToString("dd-MMM-yyyy");
                    }
                    var existingLine = lines.Find(x => x.Expiry_Date_String == expiryDateString && x.ProductCode == item.details.product.references.code);
                    if (existingLine == null)
                    {
                        ZohoCartonCloudWebhookRecordLine recordLine = new()
                        {
                            ProductCode = item.details.product.references.code,
                            Quantity = item.measures.quantity,
                            Expiry_Date_String = expiryDateString,
                            Record = recordID
                        };
                        lines.Add(recordLine);
                    }
                    else
                    {
                        existingLine.Quantity += item.measures.quantity;
                    }
                }

                var result = await ZohoAPIController.POSTWebhookLines(lines);
                if (result == false)
                {
                    throw new Exception("Unable to add webhook lines");
                }

                return new OkResult();
            }
            catch (Exception ex)
            {
                // Log the error. This will also trigger notification emails to Jeremy to investigate. 
                await ZohoAPIController.POSTWebhookLog(CartonCloudWebhookLogTypes.API_ERROR, "HEADERS: " + headersStr + "\nBODY: " + requestBody + "\nError: " + ex.Message);
                // Return an OK result to avoid the webhook from retrying on the carton cloud servers. 
                return new OkResult();
            }
        }
    }

    public class CartonCloudAPICreateSalesOrderRequest
    {
        [JsonProperty("orderReference")]
        public string OrderReference { get; set; }
        [JsonProperty("dateOrdered")]
        public string DateOrdered { get; set; }
        [JsonProperty("datePickup")]
        public string DatePickup { get; set; }
        [JsonProperty("dateDeliver")]
        public string DateDeliver { get; set; }
        [JsonProperty("customerDetails")]
        public CartonCloudAPICreateSalesOrderRequestCustomerDetails CustomerDetails { get; set; }
        [JsonProperty("packingInstructions")]
        public string PackingInstructions { get; set; }
        [JsonProperty("deliveryInstructions")]
        public string DeliveryInstructions { get; set; }
        [JsonProperty("orderLines")]
        public CartonCloudCreateSalesOrderRequestOrderLines[] OrderLines { get; set; }

        //const payload = {
        //  orderReference: 'Client Ref + ' + '/' + ' + Customer Ref',
        //  dateOrdered: "yyyy-mm-dd",
        //  datePickup: "yyyy-mm-dd",
        //  dateDeliver: "yyyy-mm-dd",
        //  customerDetails: {
        //    companyName: "",
        //    contactName: "",
        //    phone: "",
        //    email: "",
        //    address: {
        //      address1: "",
        //      address2: "",
        //      suburb: "",
        //      city: "",
        //      state: "",
        //      country: "", // ISO2code digit
        //      postcode: "",
        //    },
        //  },
        //  deliveryInstructions: "",
        //  orderLines: [{
        //    productName: "",
        //    productUUID: "",
        //    uom: "",
        //    quantity: 0
        //  }]
        //};
    }

    public class CartonCloudAPICreateSalesOrderRequestCustomerDetails
    {
        [JsonProperty("companyName")]
        public string CompanyName { get; set; }
        [JsonProperty("contactName")]
        public string ContactName { get; set; }
        [JsonProperty("phone")]
        public string Phone { get; set; }
        [JsonProperty("email")]
        public string Email { get; set; }
        [JsonProperty("address")]
        public CartonCloudAPICreateSalesOrderRequestAddress Address { get; set; }
    }

    public class CartonCloudAPICreateSalesOrderRequestAddress
    {
        [JsonProperty("address1")]
        public string Address1 { get; set; }
        [JsonProperty("address2")]
        public string Address2 { get; set; }
        [JsonProperty("suburb")]
        public string Suburb { get; set; }
        [JsonProperty("city")]
        public string City { get; set; }
        [JsonProperty("state")]
        public string State { get; set; }
        [JsonProperty("country")]
        public string Country { get; set; }
        [JsonProperty("postcode")]
        public string PostCode { get; set; }
    }

    public class CartonCloudCreateSalesOrderRequestOrderLines
    {
        [JsonProperty("ProductName")]
        public string ProductName { get; set; }
        [JsonProperty("productUUID")]
        public string ProductUUID { get; set; }
        [JsonProperty("uom")]
        public string UnitOfMeasure { get; set; }
        [JsonProperty("quantity")]
        public double Quantity { get; set; }
    }

    public class CartonCloudAPICreatePurchaseOrderRequest
    {
        [JsonProperty("orderReference")]
        public string OrderReference { get; set; }
        [JsonProperty("containerNumber")]
        public string ContainerNumber { get; set; }
        [JsonProperty("containerSize")]
        public string ContainerSize { get; set; }
        [JsonProperty("carrier")]
        public string Carrier { get; set; }
        [JsonProperty("dateOrdered")]
        public string DateOrdered { get; set; }
        [JsonProperty("arrivalDate")]
        public string ArrivalDate { get; set; }
        [JsonProperty("orderLines")]
        public CartonCloudCreatePurchaseOrderRequestOrderLines[] OrderLines { get; set; }

        //const payload = {
        //  orderReference: "",
        //  containerNumber: "",
        //  containerSize: "",
        //  carrier: "",
        //  dateOrdered: "yyyy-mm-dd",
        //  arrivalDate: "yyyy-mm-dd",
        //  orderLines: [{
        //    productName: "",
        //    productUUID: "",
        //    uom: "",
        //    quantity: 0,
        //    expiryDate: "yyyy-mm-dd",
        //    batchNumber: "",
        //  }]
        //};
    }

    public class CartonCloudCreatePurchaseOrderRequestOrderLines
    {
        [JsonProperty("productName")]
        public string ProductName { get; set; }
        [JsonProperty("productUUID")]
        public string ProductUUID { get; set; }
        [JsonProperty("uom")]
        public string UnitOfMeasure { get; set; }
        [JsonProperty("quantity")]
        public double Quantity { get; set; }
        [JsonProperty("expiryDate")]
        public string ExpiryDate { get; set; }
        [JsonProperty("batchNumber")]
        public string BatchNumber { get; set; }
    }

    public class CartonCloudAPIWebhookPayload
    {
        public string id { get; set; }
        public CartonCloudAPIWebhookPayloadReference references { get; set; }
        public string type { get; set; }
        public string status { get; set; }
        public CartonCloudAPIWebhookPayloadCustomer customer { get; set; }
        public CartonCloudAPIWebhookPayloadWarehouse warehouse { get; set; }
        public int version { get; set; }
        public CartonCloudAPIWebhookPayloadDetails details { get; set; }
        public List<CartonCloudAPIWebhookPayloadItem> Items { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadReference
    {
        public string customer { get; set; }
        public string numericId { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadCustomer
    {
        public string id { get; set; }
        public string name { get; set; }
        public bool enabled { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadWarehouse
    {
        public string id { get; set; }
        public string name { get; set; }
        public bool enabled { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadDetails
    {
        public bool urgent { get; set; }
        public string instructions { get; set; }
        public string arrivaldate { get; set; }
        public bool hasChildren { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadItem
    {
        public string id { get; set; }
        public CartonCloudAPIWebhookPayloadItemReferences references { get; set; }
        public CartonCloudAPIWebhookPayloadItemProperties properties { get; set; }
        public CartonCloudAPIWebhookPayloadItemMeasures measures { get; set; }
        public string type { get; set; }
        public CartonCloudAPIWebhookPayloadItemDetails details { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadItemReferences
    {
        public string numericId { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadItemProperties
    {
        public string palletNumber { get; set; }
        public string expiryDate { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadItemMeasures
    {
        public int quantity { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadItemDetails
    {
        public CartonCloudAPIWebhookPayloadItemProduct product { get; set; }
        public CartonCloudAPIWebhookPayloadItemUnitOfMeasure unitOfMeasure { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadItemProduct
    {
        public string id { get; set; }
        public CartonCloudAPIWebhookPayloadItemProductReferences references { get; set; }
        public string name { get; set; }
        public CartonCloudAPIWebhookPayloadCustomer customer { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadItemProductReferences
    {
        public string code { get; set; }
    }

    public class CartonCloudAPIWebhookPayloadItemUnitOfMeasure
    {
        public string type { get; set; }
        public string name { get; set; }
    }

    public class SuccessAPIResponse<T>
    {
        public int code { get; set; } = 200; // 200, 201 etc
        public T data { get; set; }
    }

    public class ErrorAPIResponse
    {
        public int code { get; set; } = 400; // 400 etc
        public string errorType { get; set; } // A string from APIErrorType
        public string errorMessage { get; set; } // Some human readable error message
    }

    public struct APIErrorType
    {
        public static string INVALID_PARAMETERS = "INVALID_PARAMETERS";
        public static string INVALID_REQUEST_BODY = "INVALID_REQUEST_BODY";
        public static string MISSING_API_CONFIG = "MISSING_API_CONFIG";
        public static string INVALID_API_CONFIG = "INVALID_API_CONFIG";
        public static string INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR";
    }

    public class CartonCloudCreateStockOnHandReportResponse
    {
        public string uuid { get; set; }
    }

    public static class CartonCloudWebhookLogTypes
    {
        public const string INBOUND = "INBOUND";
        public const string OUTBOUND = "OUTBOUND";
        public const string POST_SALES_ORDER_ERROR = "POST_SALES_ORDER_ERROR";
        public const string POST_PURCHASE_ORDER_ERROR = "POST_PURCHASE_ORDER_ERROR";
        public const string API_ERROR = "API_ERROR";
    }
}
